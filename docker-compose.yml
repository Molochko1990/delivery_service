services:
  app:
    build: .
    command: gunicorn -w 2 -k uvicorn.workers.UvicornWorker src.app.main:app --bind 0.0.0.0:8000
    ports:
      - "8000:8000"
    depends_on:
      - delivery_db
      - redis
      - rabbitmq
    env_file:
        - .env

  redis:
    image: "redis:alpine"
    environment:
      REDIS_HOST: ${REDIS_HOST}
    ports:
      - "6379:6379"

  delivery_db:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s


  worker:
    build: .
    command: sh -c "PYTHONPATH=/app poetry run python src/app/utils/parcel_worker.py"
    depends_on:
      rabbitmq:
        condition: service_healthy
    deploy:
      replicas: 1

  test_delivery_db:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${TEST_POSTGRES_USER}
      POSTGRES_PASSWORD: ${TEST_POSTGRES_PASSWORD}
      POSTGRES_DB: ${TEST_POSTGRES_DB}
    ports:
      - "5433:5432"
    volumes:
      - test_postgres_data:/var/lib/postgresql/data

  test_runner:
    build: .
    command: sh -c "PYTHONPATH=/app pytest -s src/tests/"
    depends_on:
      - test_delivery_db
      - redis
      - rabbitmq
#      - worker
    env_file:
      - .env
    environment:
      - DYNACONF_ENV=test


volumes:
  postgres_data:
  test_postgres_data: